import{_ as l,c as i,a0 as e,o as t}from"./chunks/framework.Cu3SRTkc.js";const p=JSON.parse('{"title":"テストページ","description":"","frontmatter":{},"headers":[],"relativePath":"test.md","filePath":"test.md"}'),r={name:"test.md"};function o(s,a,h,d,n,u){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="テストページ" tabindex="-1">テストページ <a class="header-anchor" href="#テストページ" aria-label="Permalink to &quot;テストページ&quot;">​</a></h1><p>試験的にページ作成（provided by VitePress）。</p><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>技術ドキュメントの運用も閲覧もSSGだとしっくりくる。CMSの面倒さが幾重にもショートカットされている感覚。</p><p>ただし、メディア管理者的な立ち位置の方にはメリットが薄く、おそらくは使い慣れたWordPressの方がよいと思われるかも。</p><p>クリティカルにSSGの方がいい！と表現できないモヤモヤがあるけど、個人的にはWPの構築と管理には胃もたれ的な感覚がともなう。（昔、MTよりWPの方が気楽だったけれど。セキュリティや管理する範囲の広さに関する不信感が胃もたれを起こしているような）</p><p>結局、ツール選びは使う人のモチベーションが大きい。</p><h2 id="ナビの編集" tabindex="-1">ナビの編集 <a class="header-anchor" href="#ナビの編集" aria-label="Permalink to &quot;ナビの編集&quot;">​</a></h2><p>docs/.vitepress/config.mtsをvimで編集すればOK。</p><h2 id="デプロイ" tabindex="-1">デプロイ <a class="header-anchor" href="#デプロイ" aria-label="Permalink to &quot;デプロイ&quot;">​</a></h2><p>deploy.shを実行（./deploy.shはGitHubにつなげた）</p><h3 id="デプロイ先を複数にしたいときは" tabindex="-1">デプロイ先を複数にしたいときは <a class="header-anchor" href="#デプロイ先を複数にしたいときは" aria-label="Permalink to &quot;デプロイ先を複数にしたいときは&quot;">​</a></h3><p>dotenvだと--modeオプションで環境を切り替えることができそう。（package.jsonでscriptsに定義すればよさげ）</p><h3 id="s3" tabindex="-1">S3 <a class="header-anchor" href="#s3" aria-label="Permalink to &quot;S3&quot;">​</a></h3><p>Cloud Frontで配信するのがいちばん拡張性高いような（要検証）。</p><p>S3パケットを選択してオリジナルのアクセスコントロールを設定（Github Actionsを使うかは別検討）。</p><h2 id="ファイル管理の要点" tabindex="-1">ファイル管理の要点 <a class="header-anchor" href="#ファイル管理の要点" aria-label="Permalink to &quot;ファイル管理の要点&quot;">​</a></h2><ul><li>記述の便利さより可読性が優先だと思われ。</li><li>ファイルサイズが重いと保管と管理も厳しい。</li><li>履歴は把握したいけれど、共同編集はカオスの元（GDでよく悲劇が。。）</li><li>パワポやエクセルは個別の作業用にはよいけれど不特定多数の閲覧には厳しいファイルができあがることが多々。</li><li>技術ドキュメントをPDFで渡されたときの絶望感を回避したい。横長の画面で読むのは厳しいし、記述が複数文書を行き来して読み進めるものだと頭痛が。。</li></ul><h2 id="ssgはドキュメント管理を救う" tabindex="-1">SSGはドキュメント管理を救う？ <a class="header-anchor" href="#ssgはドキュメント管理を救う" aria-label="Permalink to &quot;SSGはドキュメント管理を救う？&quot;">​</a></h2><ul><li>万能ではないけれど、やることを減らすのは事実。あとから読みやすいのも事実。</li><li>運用がシンプルでなければ構築の複雑さが発生するのは事実。それはどんなツールでも起きる。</li><li>万人受けはない。なんらかの言語のコードを書ける職種の人にはクリティカルだけれど。</li></ul><h2 id="あるべき姿は" tabindex="-1">あるべき姿は？ <a class="header-anchor" href="#あるべき姿は" aria-label="Permalink to &quot;あるべき姿は？&quot;">​</a></h2><ul><li>組織文化で大きく変わる。テック企業ならやるべき、と言いたいけれども、そうでない企業の方が圧倒的に多いので。</li><li>SSG単体で評価はできない（それこそ、選択はほとんど趣味）</li><li>フロントエンドとバックヤード、ユーザー、クライアントの組み合わせで総合的に判断すべき問題</li><li>CMS？　ドキュメントを「書く」と誰に「見せる」の間にコンバート・リファクタリングは極力撲滅したい（希望）。</li><li>GitHubは使う？使わない？S3を使う？使わない？Google Cloud Platform（Cloud Build）は使う？使わない？</li></ul><h3 id="顧客向けドキュメントという視点" tabindex="-1">顧客向けドキュメントという視点 <a class="header-anchor" href="#顧客向けドキュメントという視点" aria-label="Permalink to &quot;顧客向けドキュメントという視点&quot;">​</a></h3><ul><li>テック系サービスのドキュメントはプレゼンテーションと技術ドキュメントに分かれる。</li><li>プレゼンテーションはプレゼンをする人間がいかに魅力的に語れるかでツールが決まるべき。</li><li>動画フォーマットも優位なプレゼンツール。</li><li>技術ドキュメントは現状SSGが最高に読みやすい。（内容にもよる）</li><li>そもそも技術ドキュメントの読み手はエンジニアや、それに類する人。</li><li>ドキュメントの公開レイヤーは？　SSGはそういったコントロールが得意ではない。（可能ではある）</li><li>CMSはできることのメニューは揃っている。サイト外形をSSGと同じにすれば見た目では気づかれない。</li><li>ただし、CMSだとhtml書けなければ読みやすいページは難しい。（SSGは簡易的だが記法から逃れられない）＝リファクタリング</li><li>セキュリティ管理、リソースの範囲など運用コストはCMS＞SSG（複雑なことをするなら逆転もあり得る）</li></ul><h3 id="社内の稟議承認を考慮するとき" tabindex="-1">社内の稟議承認を考慮するとき <a class="header-anchor" href="#社内の稟議承認を考慮するとき" aria-label="Permalink to &quot;社内の稟議承認を考慮するとき&quot;">​</a></h3><ul><li>SSGで組む場合は知恵を絞らないとかえって煩雑なフローに。</li><li>校正向きとは言い難いので、すべてをSSGでまかなうかは別問題。（誰が書いて、誰がどうフィードバックする？）</li></ul><p>ツールの周辺を考えよう。</p>',27)]))}const S=l(r,[["render",o]]);export{p as __pageData,S as default};
